#!/usr/bin/env python3
"""
Deployment script for Find Your Team AWS Hackathon Demo
Deploys the complete infrastructure and application
"""

import subprocess
import sys
import os
import json
import time
from pathlib import Path

def run_command(command, cwd=None):
    """Run a shell command and return the result"""
    print(f"Running: {command}")
    result = subprocess.run(command, shell=True, cwd=cwd, capture_output=True, text=True)
    
    if result.returncode != 0:
        print(f"Error: {result.stderr}")
        return False, result.stderr
    
    print(f"Success: {result.stdout}")
    return True, result.stdout

def check_aws_credentials():
    """Check if AWS credentials are configured"""
    success, output = run_command("aws sts get-caller-identity")
    if not success:
        print("‚ùå AWS credentials not configured. Please run 'aws configure' first.")
        return False
    
    print("‚úÖ AWS credentials configured")
    return True

def install_dependencies():
    """Install Python dependencies"""
    print("\nüì¶ Installing dependencies...")
    
    # Install main app dependencies
    success, _ = run_command("pip install -r requirements.txt")
    if not success:
        print("‚ùå Failed to install main dependencies")
        return False
    
    # Install CDK dependencies
    success, _ = run_command("pip install aws-cdk-lib constructs", cwd="infrastructure")
    if not success:
        print("‚ùå Failed to install CDK dependencies")
        return False
    
    print("‚úÖ Dependencies installed")
    return True

def deploy_infrastructure():
    """Deploy AWS infrastructure using CDK"""
    print("\nüèóÔ∏è Deploying AWS infrastructure...")
    
    # Bootstrap CDK (if not already done)
    print("Bootstrapping CDK...")
    run_command("cdk bootstrap", cwd="infrastructure")
    
    # Deploy the stack
    success, output = run_command("cdk deploy --require-approval never", cwd="infrastructure")
    if not success:
        print("‚ùå Failed to deploy infrastructure")
        return False, None
    
    # Extract outputs from CDK deployment
    outputs = {}
    try:
        # Get stack outputs
        success, stack_info = run_command("aws cloudformation describe-stacks --stack-name FindYourTeamStack")
        if success:
            stack_data = json.loads(stack_info)
            for output in stack_data['Stacks'][0].get('Outputs', []):
                outputs[output['OutputKey']] = output['OutputValue']
    except Exception as e:
        print(f"Warning: Could not extract stack outputs: {e}")
    
    print("‚úÖ Infrastructure deployed")
    return True, outputs

def create_env_file(outputs):
    """Create .env file with deployment outputs"""
    print("\nüìù Creating environment configuration...")
    
    env_content = f"""# AWS Configuration - Generated by deployment
AWS_REGION=us-east-1

# DynamoDB Tables
USER_PROFILES_TABLE={outputs.get('UserProfilesTableName', 'FindYourTeam-UserProfiles')}
TEAM_PERFORMANCE_TABLE={outputs.get('TeamPerformanceTableName', 'FindYourTeam-TeamPerformance')}

# OpenSearch
OPENSEARCH_ENDPOINT={outputs.get('OpenSearchEndpoint', '')}

# API Gateway
API_ENDPOINT={outputs.get('APIEndpoint', '')}

# S3 Assets
ASSETS_BUCKET={outputs.get('AssetsBucket', '')}

# Flask Configuration
FLASK_SECRET_KEY=hackathon-demo-key-{int(time.time())}
FLASK_DEBUG=False
PORT=5000

# Bedrock Model Configuration
BEDROCK_MODEL_ID=anthropic.claude-3-5-sonnet-20241022-v2:0
"""
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("‚úÖ Environment file created")

def setup_sample_data():
    """Set up sample data for the demo"""
    print("\nüìä Setting up sample data...")
    
    # This would typically populate DynamoDB with sample teams, users, etc.
    # For the hackathon demo, we'll create some basic sample data
    
    sample_data_script = """
import boto3
import json
from datetime import datetime

# Initialize DynamoDB
dynamodb = boto3.resource('dynamodb', region_name='us-east-1')

# Sample team performance data
team_table = dynamodb.Table('FindYourTeam-TeamPerformance')

sample_teams = [
    {
        'teamId': 'community-dev-001',
        'timestamp': datetime.now().isoformat(),
        'metrics': {
            'productivity': 0.87,
            'collaboration': 0.92,
            'satisfaction': 0.89,
            'goalAchievement': 0.94
        },
        'members': ['user-001', 'user-002', 'user-003'],
        'agentInsights': ['High collaboration score indicates strong team dynamics'],
        'improvementSuggestions': ['Consider cross-training to reduce single points of failure']
    },
    {
        'teamId': 'edtech-002',
        'timestamp': datetime.now().isoformat(),
        'metrics': {
            'productivity': 0.91,
            'collaboration': 0.85,
            'satisfaction': 0.88,
            'goalAchievement': 0.89
        },
        'members': ['user-004', 'user-005', 'user-006'],
        'agentInsights': ['Strong productivity with room for collaboration improvement'],
        'improvementSuggestions': ['Schedule more team building activities']
    }
]

for team in sample_teams:
    try:
        team_table.put_item(Item=team)
        print(f"Added sample data for team {team['teamId']}")
    except Exception as e:
        print(f"Error adding team data: {e}")

print("Sample data setup complete!")
"""
    
    with open('setup_sample_data.py', 'w') as f:
        f.write(sample_data_script)
    
    # Run the sample data setup
    success, _ = run_command("python setup_sample_data.py")
    if success:
        print("‚úÖ Sample data created")
    else:
        print("‚ö†Ô∏è Sample data setup failed (this is optional)")
    
    # Clean up
    os.remove('setup_sample_data.py')

def test_deployment():
    """Test the deployed application"""
    print("\nüß™ Testing deployment...")
    
    # Test health endpoint
    success, _ = run_command("python -c \"import requests; print('Health check:', requests.get('http://localhost:5000/api/health').json())\"")
    if success:
        print("‚úÖ Application is responding")
    else:
        print("‚ö†Ô∏è Application test failed")

def main():
    """Main deployment function"""
    print("üöÄ Find Your Team - AWS Hackathon Deployment")
    print("=" * 50)
    
    # Check prerequisites
    if not check_aws_credentials():
        sys.exit(1)
    
    # Install dependencies
    if not install_dependencies():
        sys.exit(1)
    
    # Deploy infrastructure
    success, outputs = deploy_infrastructure()
    if not success:
        sys.exit(1)
    
    # Create environment configuration
    create_env_file(outputs or {})
    
    # Setup sample data
    setup_sample_data()
    
    print("\nüéâ Deployment Complete!")
    print("=" * 50)
    print("Your Find Your Team platform is ready!")
    print(f"API Endpoint: {outputs.get('APIEndpoint', 'Check AWS Console')}")
    print(f"DynamoDB Tables: {outputs.get('UserProfilesTableName', 'FindYourTeam-UserProfiles')}")
    print(f"OpenSearch: {outputs.get('OpenSearchEndpoint', 'Check AWS Console')}")
    print("\nTo start the application:")
    print("python aws_app.py")
    print("\nTo view the platform:")
    print("http://localhost:5000")
    
    print("\nüìã Next Steps for Hackathon Demo:")
    print("1. Test the onboarding flow")
    print("2. Verify team matching works")
    print("3. Check team performance dashboard")
    print("4. Prepare your demo presentation")
    print("5. Show the AWS architecture diagram")

if __name__ == "__main__":
    main()